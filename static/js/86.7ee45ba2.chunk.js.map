{"version":3,"file":"static/js/86.7ee45ba2.chunk.js","mappings":"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","sources":["components/TrendingList/MoviesList.jsx","pages/HomePage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { text } from '../../helpers/text';\nimport defaultImg from '../../img/default.jpg';\n\nconst MoviesList = ({ trending, time }) => {\n  const [src] = useState('https://image.tmdb.org/t/p/w500');\n  const location = useLocation();\n  let title = time === 'day' ? text.TitleMovies : text.WeekMovies;\n  if (time === 'inTheatres') {\n    title = text.TitleTheatres;\n  }\n\n  return (\n    <div>\n      <h2 className=\"pageTitle\">{title}</h2>\n\n      <ul className=\"moviesList\">\n        {trending.map(({ id, poster_path, title, vote_average }) => (\n          <Link key={id} to={`/movies/${id}`} state={location}>\n            <li>\n              {poster_path ? (\n                <img src={`${src}${poster_path}`} alt=\"Movie poster\" />\n              ) : (\n                <img src={defaultImg} alt=\"Was not found\" />\n              )}\n              <h4> {title}</h4>\n              <div>\n                <span>{vote_average.toFixed(1)}</span>\n              </div>\n            </li>\n          </Link>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MoviesList;\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport ScrollButton from '../components/ScrollButton/ScrollButton';\nimport MoviesList from '../components/TrendingList/MoviesList';\nimport ToolsMenu from '../components/ToolsMenu/ToolsMenu';\nimport Button from '../components/Button/Button';\nimport Loader from '../components/Loader/Loader';\nimport api from '../api/movies-api';\n\nconst HomePage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [trending, setTrending] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [time, setTime] = useState(searchParams.get('time') ?? 'day');\n  const [page, setPage] = useState(Number(searchParams.get('page') ?? 1));\n\n  useEffect(() => {\n    setIsLoading(true);\n    api\n      .getMoviesTrending('movie', time, page)\n      .then(results => {\n        setTrending(prev => [...prev, ...results]);\n        setSearchParams({ page, time });\n      })\n      .catch(error => {\n        console.log(error);\n        return [];\n      })\n      .finally(() => setIsLoading(false));\n  }, [time, page, setSearchParams]);\n\n  const handlePeriod = e => {\n    if (time === e.target.dataset.value) return;\n    setTime(e.target.dataset.value);\n    setPage(1);\n    setTrending([]);\n  };\n\n  const handleBtn = () => {\n    setPage(prev => prev + 1);\n  };\n\n  return (\n    <div className=\"container\">\n      <MoviesList trending={trending} time={time} />\n\n      <ToolsMenu changeSelect={handlePeriod} />\n\n      {trending.length > 0 && (\n        <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16\" />\n      )}\n\n      {trending.length > 0 && <Button onClick={handleBtn} />}\n\n      {isLoading && <Loader isLoading={isLoading} />}\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["_ref","trending","time","_useState","useState","src","_slicedToArray","location","useLocation","title","text","_jsxs","children","_jsx","className","map","_ref2","id","poster_path","vote_average","Link","to","concat","state","alt","defaultImg","toFixed","_searchParams$get","_searchParams$get2","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState2","setTrending","_useState3","_useState4","isLoading","setIsLoading","_useState5","get","_useState6","setTime","_useState7","Number","_useState8","page","setPage","useEffect","api","then","results","prev","_toConsumableArray","catch","error","console","log","finally","MoviesList","ToolsMenu","changeSelect","e","target","dataset","value","length","ScrollButton","scrollStepInPx","delayInMs","Button","onClick","Loader"],"sourceRoot":""}